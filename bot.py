import asyncio
import logging

import betterlogging as bl
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.base import DefaultKeyBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.redis import RedisStorage

from database.PostgreSQL import DatabasePSQL

from tgbot.config import load_config, Config

from tgbot.middlewares.config import ConfigMiddleware

from tgbot.middlewares.database import DatabaseMiddleware
from tgbot.misc.check_server import WebhookReader
from tgbot.misc.set_bot_commands import set_default_commands
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from tgbot.keyboards.inline import scenario_uodate
from datetime import datetime, timedelta
# from database.PostgreSQL import
import types

from web.web_server import app

scheduler = AsyncIOScheduler()

# async def send_offline_reminder(bot: Bot, db: DatabasePSQL, user_id: int, step: int):
#     if await db.is_purchased(user_id):
#         return  # —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –∫—É–ø–∏–ª –±–∏–ª–µ—Ç ‚Üí –Ω–µ —à–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
#     user = await db.get_user_from_db(user_id)
#     if not user:
#         return

#     if user["buttons_clicked"]:
#         return  # –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —é–∑–µ—Ä —Å–∞–º –Ω–∞–∂–∞–ª "–Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ"

#     text = ""
#     buttons = None

#     if step == 0:  # –ß–µ—Ä–µ–∑ 2 –¥–Ω—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
#         text = ("–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –≤ –Ω–æ–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∂–∏–≤—É—é.\n\n"
#                 "–ß–µ—Ä–µ–∑ —Å–∞–º—É—é –¥–æ—Ä–æ–≥—É—é –∫–∞—Ä—Ç–∏–Ω—É ‚Äî '–°–ø–∞—Å–∏—Ç–µ–ª—å –º–∏—Ä–∞'\n"
#                 "–•–• —Å–µ–Ω—Ç—è–±—Ä—è, —Ö—Ö:—Ö—Ö, –ú–æ—Å–∫–≤–∞")
#         buttons = types.InlineKeyboardMarkup()
#         buttons.add(types.InlineKeyboardButton(text="–∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç", url="https://paylink.ru/4900"))
#         buttons.add(types.InlineKeyboardButton(text="—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="details"))
#         buttons.add(types.InlineKeyboardButton(text="–Ω–∞–ø–æ–º–Ω–∏—Ç–µ –ø–æ–∑–∂–µ", callback_data="remind_later"))

#     elif step == 1:  # +3 —á–∞—Å–∞
#         text = ("–ê—Ä—Ç-–º–µ–¥–∏–∞—Ü–∏—è ‚Äî —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –≥–ª—É–±–∏–Ω—ã. "
#                 "–≠—Ç–æ –Ω–µ –ª–µ–∫—Ü–∏—è, –∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–æ.")

#     elif step == 2:  # +24 —á–∞—Å–∞
#         text = ("–í—Å—Ç—Ä–µ—á–∞, –∫–æ—Ç–æ—Ä—É—é —è –≥–æ—Ç–æ–≤–ª—é, –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. "
#                 "–¢—ã –Ω–µ —Å–ª—É—à–∞—Ç–µ–ª—å. –¢—ã ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, –∑—Ä–∏—Ç–µ–ª—å.")

#     elif step == 3:  # +48 —á–∞—Å–æ–≤
#         text = ("–£ —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∏. –≠—Ç–æ –ø–æ–ª–µ —Ä–æ–∂–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–∞–∑. "
#                 "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.")

#     if text:
#         await bot.send_message(user_id, text, reply_markup=buttons)

#         # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ –ë–î, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
#         await db.update_last_sent(user_id, datetime.now(), step)


# def schedule_offline_reminders(bot: Bot, db: DatabasePSQL, user_id: int, purchase_time: datetime):
#     """
#     –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
#     """
#     scheduler.add_job(send_offline_reminder, "date",
#                       run_date=purchase_time + timedelta(days=2),
#                       args=[bot, db, user_id, 0])

#     scheduler.add_job(send_offline_reminder, "date",
#                       run_date=purchase_time + timedelta(days=2, hours=3),
#                       args=[bot, db, user_id, 1])

#     scheduler.add_job(send_offline_reminder, "date",
#                       run_date=purchase_time + timedelta(days=3, hours=2),
#                       args=[bot, db, user_id, 2])

#     scheduler.add_job(send_offline_reminder, "date",
#                       run_date=purchase_time + timedelta(days=4, hours=2),
#                       args=[bot, db, user_id, 3])



async def reminder_worker(bot, db):
    try:
        while True:
            # print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            now = datetime.utcnow()
            sql = """
            SELECT id, user_id, type, payload FROM reminders
            WHERE status = 'pending' AND send_at <= $1
            """
            rows = await db.execute(sql, now, fetch=True)

            for row in rows:
                user_id = row['user_id']
                reminder_type = row['type']
                payload = row['payload']

                # –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await send_reminder(bot, user_id, reminder_type, payload)

                # –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                await db.execute("UPDATE reminders SET status='sent' WHERE id=$1", row['id'], execute=True)

            await asyncio.sleep(10)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–∞: {e}") 


async def send_reminder(bot, user_id, reminder_type, payload):
    if reminder_type == "firstpay":
        await bot.send_message(user_id, "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å: —Ç–≤–æ–µ –ª–∏—á–Ω–æ–µ –∞—É–¥–∏–æ-–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Å–≤–æ–π –º–∏—Ä —á–µ—Ä–µ–∑ —à–µ–¥–µ–≤—Ä\n\n\
–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è —Ç–µ–±—è –∂–¥–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–π—á–∞—Å ‚Äî —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è", reply_markup = await scenario_uodate.after_feedback())
    elif reminder_type == 'email':
        await bot.send_message(user_id, "–Ø –±—É–¥—É —Ä–∞–¥–∞ –≤—ã—Å–ª–∞—Ç—å –≤–∞–º –∞—É–¥–∏–æ-–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ —Å–≤–æ–π e-mail")
    elif reminder_type == 'email24':
        await bot.send_message(user_id, "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –ø–æ—á—Ç–∏ —É—Å–∫–æ–ª—å–∑–Ω—É–ª–∞...\n\n\
–û—Å—Ç–∞–≤—å —Å–≤–æ–π e-mail, –∏ —è —Å–º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ —Ç–æ, —á—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è üíå")
    elif reminder_type == 'start':
        await bot.send_message(user_id, "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å: —Ç–≤–æ–µ –ª–∏—á–Ω–æ–µ –∞—É–¥–∏–æ-–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Å–≤–æ–π –º–∏—Ä —á–µ—Ä–µ–∑ —à–µ–¥–µ–≤—Ä\n\n\
–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è —Ç–µ–±—è –∂–¥–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–π—á–∞—Å ‚Äî —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è", reply_markup=await scenario_uodate.reminder_start_btn())
    elif reminder_type == 'start24':
        await bot.send_message(user_id, "–ü—Ä–æ—à—ë–ª —Ü–µ–ª—ã–π –¥–µ–Ω—å, –∞ —Ç–≤–æ–µ –ª–∏—á–Ω–æ–µ –∞—É–¥–∏–æ-–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç —Ç–µ–±—è.\n\n\
–®–µ–¥–µ–≤—Ä –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ —Ä–µ—à–∏—Ç—Å—è –≤–æ–π—Ç–∏. –ú–æ–∂–µ—Ç, —Å–µ–π—á–∞—Å ‚Äî –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–π –º–æ–º–µ–Ω—Ç?", reply_markup=await scenario_uodate.reminder_start_btn())
    elif reminder_type == 'choice_audio':
        await bot.send_message(user_id, "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å: —Ç–≤–æ–µ –ª–∏—á–Ω–æ–µ –∞—É–¥–∏–æ-–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Å–≤–æ–π –º–∏—Ä —á–µ—Ä–µ–∑ —à–µ–¥–µ–≤—Ä\n\n\
–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è —Ç–µ–±—è –∂–¥–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–π—á–∞—Å ‚Äî —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è", reply_markup=await scenario_uodate.audio_choice_step())
    elif reminder_type == 'choice_audio24':
        await bot.send_message(user_id, "–ü—Ä–æ—à—ë–ª —Ü–µ–ª—ã–π –¥–µ–Ω—å, –∞ —Ç–≤–æ–µ –ª–∏—á–Ω–æ–µ –∞—É–¥–∏–æ-–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç —Ç–µ–±—è.\n\n\
–®–µ–¥–µ–≤—Ä –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ —Ä–µ—à–∏—Ç—Å—è –≤–æ–π—Ç–∏. –ú–æ–∂–µ—Ç, —Å–µ–π—á–∞—Å ‚Äî –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–π –º–æ–º–µ–Ω—Ç?", reply_markup=await scenario_uodate.audio_choice_step())
    elif reminder_type == 'choice_audio_reminder':
        await bot.send_message(user_id, "‚Äú–ø–æ–º–Ω–∏—à—å, –¥–æ—Ä–æ–≥–∞ –∫ —Å–≤–æ–∏–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º –≤–º–µ—Å—Ç–µ —Å –≤–µ–ª–∏–∫–∏–º –≥–µ–Ω–∏–µ–º –Ω–∞—Å –∂–¥–µ—Ç?", reply_markup=await scenario_uodate.continue_now())
    elif reminder_type == 'first_audio':
        await bot.send_message(user_id, "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å: —Ç–≤–æ–µ –ª–∏—á–Ω–æ–µ –∞—É–¥–∏–æ-–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Å–≤–æ–π –º–∏—Ä —á–µ—Ä–µ–∑ —à–µ–¥–µ–≤—Ä\n\n\
–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è —Ç–µ–±—è –∂–¥–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–π—á–∞—Å ‚Äî —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è", reply_markup=await scenario_uodate.continue_step())
    elif reminder_type == 'after_audio':
        await bot.send_message(user_id, "–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –¥–æ—Ä–æ–≥–∞ –≤ —Å–≤–æ—é –≥–ª—É–±–∏–Ω—É?", reply_markup=await scenario_uodate.continue_step())
    elif reminder_type == 'after_audio3':
        await bot.send_message(user_id, "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å: —Ç–≤–æ–µ –ª–∏—á–Ω–æ–µ –∞—É–¥–∏–æ-–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Å–≤–æ–π –º–∏—Ä —á–µ—Ä–µ–∑ —à–µ–¥–µ–≤—Ä\n\n\
–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è —Ç–µ–±—è –∂–¥–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ–π—á–∞—Å ‚Äî —Ç–æ —Å–∞–º–æ–µ –≤—Ä–µ–º—è", reply_markup=await scenario_uodate.continue_step())
    elif reminder_type == 'after_audio24':
        await bot.send_message(user_id, "–ü—Ä–æ—à—ë–ª —Ü–µ–ª—ã–π –¥–µ–Ω—å, –∞ —Ç–≤–æ–µ –ª–∏—á–Ω–æ–µ –∞—É–¥–∏–æ-–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤—Å—ë –µ—â—ë –∂–¥—ë—Ç —Ç–µ–±—è.\n\n\
–®–µ–¥–µ–≤—Ä –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ —Ä–µ—à–∏—Ç—Å—è –≤–æ–π—Ç–∏. –ú–æ–∂–µ—Ç, —Å–µ–π—á–∞—Å ‚Äî –∏–º–µ–Ω–Ω–æ —Ç–≤–æ–π –º–æ–º–µ–Ω—Ç?", reply_markup=await scenario_uodate.continue_step())
    elif reminder_type == 'after_pay':
        await bot.send_message(user_id, "–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –≤ –Ω–æ–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ. –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–∂–∏–≤—É—é.\n\n\
–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –õ–µ–æ–Ω–∞—Ä–¥–æ –æ –ø–æ–∏—Å–∫–µ —Å–≤–æ–µ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏, –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –º–∏—Ä–µ, –≥–¥–µ –Ω–µ—Ç\
–Ω–∏—á–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ, –∫–∞–∫ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –Ω–µ–º —É—Å—Ç–æ–π—á–∏–≤—ã–º. –ß–µ—Ä–µ–∑ —Å–∞–º—É—é –¥–æ—Ä–æ–≥—É—é –∫–∞—Ä—Ç–∏–Ω—É,\
–∫–æ–≥–¥–∞ –ª–∏–±–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω: ‚Äú–°–ø–∞—Å–∏—Ç–µ–ª—å –º–∏—Ä–∞\n\n‚Äù\
–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –≥–µ–Ω–∏—è —Å–∫–≤–æ–∑—å —Å–µ–±—è –∏ —É–≤–∏–¥–µ—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n\n\
–•–• —Å–µ–Ω—Ç—è–±—Ä—è, —Ö—Ö:—Ö—Ö, –ú–æ—Å–∫–≤–∞\n\n\
–≠—Ç–æ –Ω–µ –∞—É–¥–∏–æ. –ù–µ –±–æ—Ç. –≠—Ç–æ ‚Äî –∂–∏–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ –∫–∞–º–µ—Ä–Ω–æ–π –∏ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–π\
–∞—Ç–º–æ—Å—Ñ–µ—Ä–µ", reply_markup=await scenario_uodate.offline_event_step())
    
    


    # if reminder_type == "track_reminder":
    #     await bot.send_message(user_id, "–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞—É–¥–∏–æ-–ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ!")
    # elif reminder_type == "email_reminder":
    #     await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å —Å–≤–æ–π e-mail, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!")
    # elif reminder_type.startswith("offline_event"):
    #     await bot.send_message(user_id, "–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏ –æ—Ñ—Ñ–ª–∞–π–Ω-—Å–æ–±—ã—Ç–∏–µ!")


def register_global_middlewares(dp: Dispatcher, config: Config, session_pool=None):
    middleware_types = [
        ConfigMiddleware(config)
    ]

    if session_pool:
        middleware_types.append(DatabaseMiddleware(session_pool))
        dp.update.outer_middleware(DatabaseMiddleware(session_pool))

    for middleware_type in middleware_types:
        dp.message.outer_middleware(middleware_type)
        dp.callback_query.outer_middleware(middleware_type)


def setup_logging():
    log_level = logging.INFO
    bl.basic_colorized_config(level=log_level)

    logging.basicConfig(
        level=logging.INFO,
        format="%(filename)s:%(lineno)d #%(levelname)-8s [%(asctime)s] - %(name)s - %(message)s",
    )
    logger = logging.getLogger(__name__)
    logger.info("Starting bot")


def get_storage(config):
    if config.tg_bot.use_redis:
        return RedisStorage.from_url(
            config.redis.dsn(),
            key_builder=DefaultKeyBuilder(with_bot_id=True, with_destiny=True),
        )
    else:
        return MemoryStorage()


async def on_startup(bot: Bot, admin_ids: list[int]):
    await set_default_commands(bot, admin_ids)
    # await broadcaster.broadcast(bot, admin_ids, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")


async def db_psql(config):
    db = DatabasePSQL(config.db)
    # await db.drop_users()
    # await db.drop_tickets()
    # await db.drop_impressions()
    # await db.drop_accesses()
    # await db.drop_payments()

    await db.create_table_users()
    await db.create_table_tickets()
    await db.create_table_impressions()
    await db.create_table_payments()
    await db.create_table_accesses()
    await db.create_table_promocode()
    await db.create_table_offline_reminders()
    await db.create_table_reminders()

    return db


async def main():
    from tgbot.handlers import routers_list
    # app.run(host="0.0.0.0", port=8093)

    setup_logging()

    config = load_config(".env")
    storage = get_storage(config)

    bot = Bot(token=config.tg_bot.token,
              default=DefaultBotProperties(parse_mode="HTML", protect_content=True))
    dp = Dispatcher(storage=storage)
    dp.include_routers(*routers_list)

    db = await db_psql(config)

    register_global_middlewares(dp, config, db)
    asyncio.create_task(WebhookReader.reader(db))  # –ø—Ä–∏—ë–º –ø–ª–∞—Ç–µ–∂–µ–π

    # <<< –ó–ê–ü–£–°–ö–ê–ï–ú reminder_worker >>>
    asyncio.create_task(reminder_worker(bot, db))

    # <<< –ó–ê–ü–£–°–ö–ê–ï–ú APSCHEDULER >>>
    scheduler.start()
    
    print('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞')
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.error("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
